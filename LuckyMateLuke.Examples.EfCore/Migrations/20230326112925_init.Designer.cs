// <auto-generated />
using System;
using LuckyMateLuke.Examples.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LuckyMateLuke.Examples.EfCore.Migrations
{
    [DbContext(typeof(CustomDbContext))]
    [Migration("20230326112925_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupProjectStudent", b =>
                {
                    b.Property<int>("GroupProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("GroupProjectsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("GroupProjectStudent");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("SchoolId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolId1");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.GroupProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GroupProject");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.ParentStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("ParentStudent");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("State")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("School");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Grades")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("GroupProjectStudent", b =>
                {
                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.GroupProject", null)
                        .WithMany()
                        .HasForeignKey("GroupProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Group", b =>
                {
                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.School", null)
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId1");

                    b.OwnsOne("LuckyMateLuke.Examples.EfCore.Entities.BaseEntity.BaseEntity+Meta", "MetaData", b1 =>
                        {
                            b1.Property<int>("GroupId")
                                .HasColumnType("int");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("CreatedOnUtc")
                                .HasColumnType("bigint");

                            b1.Property<int>("LastUpdatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("LastUpdatedOnUtc")
                                .HasColumnType("bigint");

                            b1.HasKey("GroupId");

                            b1.ToTable("Group");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("MetaData");

                    b.Navigation("School");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.GroupProject", b =>
                {
                    b.OwnsOne("LuckyMateLuke.Examples.EfCore.Entities.BaseEntity.BaseEntity+Meta", "MetaData", b1 =>
                        {
                            b1.Property<int>("GroupProjectId")
                                .HasColumnType("int");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("CreatedOnUtc")
                                .HasColumnType("bigint");

                            b1.Property<int>("LastUpdatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("LastUpdatedOnUtc")
                                .HasColumnType("bigint");

                            b1.HasKey("GroupProjectId");

                            b1.ToTable("GroupProject");

                            b1.WithOwner()
                                .HasForeignKey("GroupProjectId");
                        });

                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Parent", b =>
                {
                    b.OwnsOne("LuckyMateLuke.Examples.EfCore.Entities.BaseEntity.BaseEntity+Meta", "MetaData", b1 =>
                        {
                            b1.Property<int>("ParentId")
                                .HasColumnType("int");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("CreatedOnUtc")
                                .HasColumnType("bigint");

                            b1.Property<int>("LastUpdatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("LastUpdatedOnUtc")
                                .HasColumnType("bigint");

                            b1.HasKey("ParentId");

                            b1.ToTable("Parent");

                            b1.WithOwner()
                                .HasForeignKey("ParentId");
                        });

                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.ParentStudent", b =>
                {
                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.Student", "Student")
                        .WithMany("Parents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.School", b =>
                {
                    b.OwnsOne("LuckyMateLuke.Examples.EfCore.Entities.BaseEntity.BaseEntity+Meta", "MetaData", b1 =>
                        {
                            b1.Property<int>("SchoolId")
                                .HasColumnType("int");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("CreatedOnUtc")
                                .HasColumnType("bigint");

                            b1.Property<int>("LastUpdatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("LastUpdatedOnUtc")
                                .HasColumnType("bigint");

                            b1.HasKey("SchoolId");

                            b1.ToTable("School");

                            b1.WithOwner()
                                .HasForeignKey("SchoolId");
                        });

                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Student", b =>
                {
                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.Group", "Group")
                        .WithMany("Student")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuckyMateLuke.Examples.EfCore.Entities.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LuckyMateLuke.Examples.EfCore.Entities.BaseEntity.BaseEntity+Meta", "MetaData", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .HasColumnType("int");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("CreatedOnUtc")
                                .HasColumnType("bigint");

                            b1.Property<int>("LastUpdatedBy")
                                .HasColumnType("int");

                            b1.Property<long>("LastUpdatedOnUtc")
                                .HasColumnType("bigint");

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Group");

                    b.Navigation("MetaData");

                    b.Navigation("School");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Group", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.School", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("LuckyMateLuke.Examples.EfCore.Entities.Student", b =>
                {
                    b.Navigation("Parents");
                });
#pragma warning restore 612, 618
        }
    }
}
